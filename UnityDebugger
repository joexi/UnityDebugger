using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEditor;
using System.Reflection;
using System;
public class DebugTest
{
    public static DebugTest instance = new DebugTest();
    public void TestFuc()
    {
        Debug.LogError("TestFuc!");
    }

    public static DebugTest Instance()
    {
        return instance;
    }
}

public class UnityDebugger : EditorWindow
{
    

    public enum UnityDebuggerActionType
    {
        Class,
        Method,
        Field
    }
    public class UnityDebuggerAction
    {
        public UnityDebuggerActionType Type;
        public string Content;
        public object Result;
        public object[] Params;
    }

    public List<UnityDebuggerAction> Actions = new List<UnityDebuggerAction>();
    public List<Type> Types = new List<Type>();

    
    [MenuItem(@"Tools/Debugger")]
    public static void Open()
    {
        UnityDebugger win = EditorWindow.GetWindow<UnityDebugger>();
        win.Show();
        win.Init();
    }

    public void Init()
    {
        Assembly[] assemblys = AppDomain.CurrentDomain.GetAssemblies();
        foreach (var assembly in assemblys)
        {
            Type[] types = assembly.GetTypes();
        }

    }

    public void OnGUI()
    {
        GUILayout.BeginHorizontal();
        if (GUILayout.Button("测试")) {
            UnityDebuggerAction action = new UnityDebuggerAction
            {
                Type = UnityDebuggerActionType.Class,
                Content = "DebugTest"
            };

            Actions.Add(action);

            UnityDebuggerAction action2 = new UnityDebuggerAction
            {
                Type = UnityDebuggerActionType.Method,
                Content = "Instance"
            };

            Actions.Add(action2);

            UnityDebuggerAction action3 = new UnityDebuggerAction
            {
                Type = UnityDebuggerActionType.Method,
                Content = "TestFuc"
            };

            Actions.Add(action3);
        }
        if (GUILayout.Button("类"))
        {
            UnityDebuggerAction action = new UnityDebuggerAction
            {
                Type = UnityDebuggerActionType.Class
            };
            Actions.Add(action);
        }
        if (GUILayout.Button("函数"))
        {
            UnityDebuggerAction action = new UnityDebuggerAction
            {
                Type = UnityDebuggerActionType.Method
            };
            Actions.Add(action);
        }
        if (GUILayout.Button("字段"))
        {
            UnityDebuggerAction action = new UnityDebuggerAction
            {
                Type = UnityDebuggerActionType.Field
            };
            Actions.Add(action);
        }
        if (GUILayout.Button("Clear"))
        {
            Actions.RemoveAt(Actions.Count - 1);
        }
        GUILayout.EndHorizontal();

       
        for (int i = 0; i < Actions.Count; i++)
        {
            GUILayout.BeginHorizontal();
            UnityDebuggerAction act = Actions[i];
            GUILayout.Label(act.Type.ToString(), GUILayout.Width(150));
            act.Content = GUILayout.TextField(act.Content, GUILayout.Width(150));
            if (act.Type == UnityDebuggerActionType.Method)
            {
                GUILayout.Label("", GUILayout.Width(150));
            }
            else {
                GUILayout.Label("", GUILayout.Width(150));
            }
            if (act.Result != null) {
                GUILayout.Label("Result:" + act.Result.ToString() + " Type:" + act.Result.GetType());
            }
            GUILayout.EndHorizontal();
        }
       


        GUILayout.BeginHorizontal();
        if (GUILayout.Button("Invoke"))
        {
            List<object> objList = new List<object>();
            for (int i = 0; i < Actions.Count; i++)
            {
                Debug.LogError(objList.Count + " " + i);
                UnityDebuggerAction act = Actions[i];
                Debug.LogError(act.Content);
                if (act.Type == UnityDebuggerActionType.Class)
                {
                    Assembly[] assemblys = AppDomain.CurrentDomain.GetAssemblies();
                    Type t = null;
                    for (int j = 0; j < assemblys.Length; j++) {
                        t = assemblys[j].GetType(act.Content);
                        if (t != null)
                        {
                            break;
                        }
                    }
                    objList.Add(t);
                    act.Result = t;
                }
                else if (act.Type == UnityDebuggerActionType.Field)
                {
                    object lastObj = objList[i - 1];
                    
                    if (lastObj is Type)
                    {
                        Type type = (lastObj as Type);
                        while (type != null)
                        {
                            FieldInfo obj = type.GetField(act.Content.ToString(), BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
                            PropertyInfo obj2 = type.GetProperty(act.Content.ToString(), BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);

                            if (obj != null)
                            {
                                object result = obj.GetValue(lastObj);
                                objList.Add(result);
                                act.Result = result;
                                break;
                            }
                            else if (obj2 != null)
                            {
                                object result = obj2.GetValue(lastObj, null);
                                objList.Add(result);
                                act.Result = result;
                                break;
                            }
                            else {
                                type = type.BaseType;
                                Debug.LogError("type " + type);
                                if (type == null) {
                                    Debug.LogError("Not Found");
                                    objList.Add(null);
                                    break;
                                }
                            }
                        }
                       
                    }
                    else
                    {
                        Debug.LogError(lastObj + " " + act.Content);
                        FieldInfo obj = lastObj.GetType().GetField(act.Content.ToString(), BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
                        if (obj != null)
                        {
                            object result = obj.GetValue(lastObj);
                            objList.Add(result);
                            act.Result = result;
                        }
                        else
                        {
                            PropertyInfo prop = lastObj.GetType().GetProperty(act.Content.ToString(), BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
                            object result = prop.GetValue(lastObj, null);
                            objList.Add(result);
                            act.Result = result;
                        }
                    }
                }
                else if (act.Type == UnityDebuggerActionType.Method)
                {
                    
                    object lastObj = objList[i - 1];
                    if (lastObj is Type)
                    {
                        MethodInfo obj = (lastObj as Type).GetMethod(act.Content.ToString(), BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
                        object result = obj.Invoke(null, act.Params);
                        objList.Add(result);
                        act.Result = result;
                    }  
                    else  
                    {
                        MethodInfo obj = lastObj.GetType().GetMethod(act.Content.ToString(), BindingFlags.Public | BindingFlags.Instance | BindingFlags.Static);
                        object result = obj.Invoke(lastObj, act.Params);
                        objList.Add(result);
                        act.Result = result;
                    }
                }
            }
            LogObj(objList);
        }
        GUILayout.EndHorizontal();
    }

    public void LogObj(List<object> objs) {
        //for (int i = objs.Count - 1; i >= 0; i--) {
        //    Debug.LogError(objs[i]);
        //}
    }
}
